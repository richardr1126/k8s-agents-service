"use client";

import { useEffect, useState } from "react";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";

// Key for localStorage to remember dismissal
const STORAGE_KEY = "privacy_notice_v1_dismissed";

/**
 * PrivacyPopup displays a lightweight disclosure about data handling.
 * - Conversations (messages, tool calls, metadata) are stored in LangSmith for observability.
 * - Conversations plus user/thread metadata are also stored on the backend service.
 * - Only an internal generated user id is associated with threads; no PII (like email) is stored
 *   unless you explicitly share it in the chat content.
 * - You can clear your browser local state by using your browser storage tools; server-side data
 *   will persist for debugging and product improvement.
 */
// Allow programmatic control via exported helper
let externalOpenSetter: ((open: boolean) => void) | null = null;

export function showPrivacyPopup() {
  if (externalOpenSetter) {
    externalOpenSetter(true);
  } else if (typeof window !== 'undefined') {
    window.dispatchEvent(new Event('privacy-popup-open'));
  }
}

export function PrivacyPopup() {

  const [open, setOpen] = useState(false);

  useEffect(() => {
    try {
      const dismissed = typeof window !== 'undefined' && window.localStorage.getItem(STORAGE_KEY);
      if (!dismissed) {
        // Defer open slightly to avoid layout shift on first paint
        const t = setTimeout(() => setOpen(true), 400);
        return () => clearTimeout(t);
      }
    } catch {
      // Ignore storage errors
    }
  }, []);

  const handleDismiss = () => {
    try {
      window.localStorage.setItem(STORAGE_KEY, Date.now().toString());
    } catch {
      // ignore
    }
    setOpen(false);
  };

  // Register external setter & event listener
  useEffect(() => {
    externalOpenSetter = setOpen;
    const handler = () => setOpen(true);
    window.addEventListener('privacy-popup-open', handler);
    return () => {
      externalOpenSetter = null;
      window.removeEventListener('privacy-popup-open', handler);
    };
  }, []);

  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetContent side="bottom" className="border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80 p-4 sm:p-6 w-full max-w-full">
        <SheetHeader>
          <SheetTitle>Privacy & Data Usage</SheetTitle>
          <SheetDescription asChild>
            <div className="space-y-2 text-sm leading-relaxed">
              <p>
                Your chat conversations are anonymously stored for <strong>observability</strong>, <strong>debugging</strong> and to <strong>improve the agents</strong>.
              </p>
              <p>
                <strong>Avoid sharing sensitive personal information. Anything you type becomes part of the stored conversation forever.</strong>
                {" "}We only associate messages with an internal anonymous user id and thread ids generated by the service.
              </p>
              <p>
                <strong>Archiving chats simply removes them from your browser storage, but they will persist on the server.</strong>
              </p>
            </div>
          </SheetDescription>
        </SheetHeader>
        <div className="mt-4 flex justify-end">
          <Button size="sm" variant="outline" onClick={handleDismiss}>Dismiss</Button>
        </div>
      </SheetContent>
    </Sheet>
  );
}
